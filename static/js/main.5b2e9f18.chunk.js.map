{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","start","renderSquare","create_row","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","Math","random","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GAEd,OACE,4BAAQC,UAAY,SAASC,QAAWF,EAAME,SAC3CF,EAAMG,O,IAKLC,E,2KACSC,GAAI,IAAD,OAEd,OACE,kBAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,iCAI7BG,GACT,OACE,yBAAKP,UAAU,aACZK,KAAKG,aAAaD,GAClBF,KAAKG,aAAaD,EAAM,GACxBF,KAAKG,aAAaD,EAAM,M,+BAI7B,OACE,6BACGF,KAAKI,WAAW,GADnB,IAEGJ,KAAKI,WAAW,GAFnB,IAGGJ,KAAKI,WAAW,GAHnB,S,GApBcC,IAAMC,WA6BpBC,E,kDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAEDc,MAAQ,CACXC,QAAS,CACP,CACER,QAASS,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,QAASC,KAAKC,SAAW,IAVV,E,wDAaPhB,GACV,IAAMU,EAAUT,KAAKQ,MAAMC,QAAQO,MAAM,EAAGhB,KAAKQ,MAAMI,WAAa,GAE9DX,EADUQ,EAAQA,EAAQQ,OAAS,GACjBhB,QAAQe,QAC5BE,EAAgBjB,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKQ,MAAMK,QAAU,IAAM,IACxCb,KAAKmB,SAAS,CACZV,QAASA,EAAQW,OAAO,CAAC,CACvBnB,QAASA,KAEXW,WAAYH,EAAQQ,OACpBJ,SAAUb,KAAKQ,MAAMK,a,6BAGlBQ,GACLrB,KAAKmB,SAAS,CACZP,WAAYS,EACZR,QAAUQ,EAAO,IAAO,M,+BAGlB,IAeJC,EAfG,OACDb,EAAUT,KAAKQ,MAAMC,QACrBc,EAAUd,EAAQT,KAAKQ,MAAMI,YAC7BY,EAASN,EAAgBK,EAAQtB,SACjCwB,EAAQhB,EAAQiB,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQ/B,QAAS,kBAAM,EAAKkC,OAAOH,KAAQC,OASjD,OAHSN,EAATE,EAAkB,WAAaA,EACtB,iBAAmBxB,KAAKQ,MAAMK,QAAU,IAAM,KAGrD,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAASsB,EAAQtB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAKgC,YAAYhC,OAGnC,yBAAKJ,UAAU,aACb,6BAAM2B,GACN,4BAAKG,S,GAjEIpB,IAAMC,WAgFzB,SAASY,EAAgBjB,GAYvB,IAXA,IAAM+B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAjC,EAAI,EAAGA,EAAIiC,EAAMf,OAAQlB,IAAK,CAAC,IAAD,cACnBiC,EAAMjC,GADa,GAC9BkC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAGrC,GAAIlC,EAAQgC,IAAMhC,EAAQgC,KAAOhC,EAAQiC,IAAMjC,EAAQgC,KAAOhC,EAAQkC,GACpE,OAAOlC,EAAQgC,GAGnB,OAAO,KAxBTG,IAASC,OACP,kBAAC9B,EAAD,MACA+B,SAASC,eAAe,W","file":"static/js/main.5b2e9f18.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  // gets value and onClick from renderSquare\n  return (\n    <button className = \"square\" onClick = {props.onClick}>\n      {props.value}\n    </button>\n    );\n}\n \n  class Board extends React.Component { \n    renderSquare(i) {\n      // value and onclick value transfers to component Square \n      return(\n        <Square \n          value={this.props.squares[i]} // got val from {current.squares}\n          onClick={() => this.props.onClick(i)} // got val from {i => this.handleClick(i)}\n        />\n      );\n    }\n    create_row(start) { // creates row length of 3, var start is the starting index\n      return (\n        <div className=\"board-row\"> \n          {this.renderSquare(start)}\n          {this.renderSquare(start+1)}\n          {this.renderSquare(start+2)}\n        </div>)\n    }\n    render() { // renders 9 squares\n      return (\n        <div>\n          {this.create_row(0)} {/* creates the first row */}\n          {this.create_row(3)} {/* creates the second row */}\n          {this.create_row(6)} {/* creates the third row */}\n        </div>\n      );\n    }\n  }\n  // renders the game display\n  class Game extends React.Component {\n    constructor(props) { // constructs with starting values set\n      super(props); // constructor starts with super(), able to use functions in Board\n                    // call super when defining the constructor of a subclass\n      this.state = {\n        history: [ // [{squares:[Array(9).fill(null)]}]\n          {\n            squares: Array(9).fill(null)\n          }\n        ],\n        stepNumber: 0, // count var\n        xIsNext: Math.random() < 0.5 // Random for which player goes first (50% each)\n      };\n    }\n    handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);  \n      const current = history[history.length - 1]; // current history\n      const squares = current.squares.slice(); // copying array using .slice() because of immutability\n      if (calculateWinner(squares) || squares[i]) { // ends the game\n        return;\n      } \n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{ // concatenates {squares: array(9)} inside history array\n          squares: squares\n        }]),\n        stepNumber: history.length, \n        xIsNext: !this.state.xIsNext // changes turn\n      });\n    }\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0 // changes turn\n      });\n    }\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n      const moves = history.map((step, move) => { // var move is the key of the object inside array\n        const desc = move ? // creates the text inside each button for tracking\n          'Go to move #' + move :\n          'Go to game start';\n        return (\n          <li key={move}>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n\n      });\n      let status;\n      winner ? status = 'Winner: ' + winner : \n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board // exports the values of attr to Board component\n              squares={current.squares}\n              onClick={i => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  // renders the game component to element\n  ReactDOM.render(\n    <Game />, // goes inside of the the second parameter;\n    document.getElementById('root') // returns <div id = \"root\"></div> \n  );\n\n  function calculateWinner(squares) {\n    const lines = [ // Contains all the possible ways of winning \n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i]; \n      // checks if the squares contains winning index\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n    }}\n    \n    return null;\n  }\n"],"sourceRoot":""}